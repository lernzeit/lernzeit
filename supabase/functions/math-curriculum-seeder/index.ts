import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.51.0';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
const supabaseServiceRoleKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
const geminiApiKey = Deno.env.get('GEMINI_API_KEY');

const supabase = createClient(supabaseUrl, supabaseServiceRoleKey);

// Math curriculum structure from the provided data
const MATH_CURRICULUM = {
  "1": {
    "Q1": {
      "Zahlen & Operationen": ["Zahlen bis 10: z√§hlen, ordnen", "Zerlegen im Zehnerraum"],
      "Gr√∂√üen & Messen": ["L√§ngen vergleichen", "Uhr: volle Stunden"],
      "Raum & Form": ["Einfache Formen erkennen", "Muster fortsetzen"],
      "Daten & Zufall": ["Strichlisten und einfache H√§ufigkeiten"]
    },
    "Q2": {
      "Zahlen & Operationen": ["Addition/Subtraktion bis 20 ohne Zehner√ºbergang"],
      "Gr√∂√üen & Messen": ["L√§ngen sch√§tzen", "Uhr: halbe Stunden"],
      "Raum & Form": ["Spiegelachsen einfache Symmetrien"],
      "Daten & Zufall": ["Einfache Bilddiagramme lesen"]
    },
    "Q3": {
      "Zahlen & Operationen": ["Addition/Subtraktion bis 20 mit Zehner√ºbergang"],
      "Gr√∂√üen & Messen": ["Geld: Euro/M√ºnzen kennenlernen"],
      "Raum & Form": ["Formen ordnen nach Eigenschaften"],
      "Daten & Zufall": ["Daten erheben (Klassenumfrage)"]
    },
    "Q4": {
      "Zahlen & Operationen": ["Zahlen bis 100 kennenlernen", "Erste Multiplikationsvorstellungen"],
      "Gr√∂√üen & Messen": ["L√§ngen mit Lineal (cm) messen"],
      "Raum & Form": ["R√§umliche Orientierung", "Symmetrische Muster"],
      "Daten & Zufall": ["S√§ulendiagramme einfach"]
    }
  },
  // Add simplified curriculum for grades 2-10
  "2": {
    "Q1": {"Zahlen & Operationen": ["ZR 100 Addition/Subtraktion"], "Gr√∂√üen & Messen": ["Geld bis 2‚Ç¨"], "Raum & Form": ["Rechteck/Quadrat"], "Daten & Zufall": ["Kombinatorik"]},
    "Q2": {"Zahlen & Operationen": ["Einmaleins 2er/5er/10er"], "Gr√∂√üen & Messen": ["cm/m"], "Raum & Form": ["Dreiecke"], "Daten & Zufall": ["H√§ufigkeiten"]},
    "Q3": {"Zahlen & Operationen": ["Einmaleins erweitern"], "Gr√∂√üen & Messen": ["g/kg"], "Raum & Form": ["Spiegelungen"], "Daten & Zufall": ["Zufall"]},
    "Q4": {"Zahlen & Operationen": ["Einmaleins automatisieren"], "Gr√∂√üen & Messen": ["Umrechnen"], "Raum & Form": ["W√ºrfelnetze"], "Daten & Zufall": ["Experimente"]}
  },
  "3": {
    "Q1": {"Zahlen & Operationen": ["ZR 1000", "Schriftlich +/-"], "Gr√∂√üen & Messen": ["mm-cm-m"], "Raum & Form": ["Umfang"], "Daten & Zufall": ["S√§ulendiagramme"]},
    "Q2": {"Zahlen & Operationen": ["Multiplikation/Division"], "Gr√∂√üen & Messen": ["Gewicht"], "Raum & Form": ["Fl√§chen", "Winkel"], "Daten & Zufall": ["Mittelwert"]},
    "Q3": {"Zahlen & Operationen": ["Mehrstellige Multiplikation"], "Gr√∂√üen & Messen": ["Fl√§che/Volumen"], "Raum & Form": ["Netze/Koordinaten"], "Daten & Zufall": ["Diagrammvergleich"]},
    "Q4": {"Zahlen & Operationen": ["Dezimalzahlen"], "Gr√∂√üen & Messen": ["Zeitpl√§ne"], "Raum & Form": ["Drehungen"], "Daten & Zufall": ["Wahrscheinlichkeit"]}
  },
  "4": {
    "Q1": {"Zahlen & Operationen": ["ZR 1.000.000"], "Gr√∂√üen & Messen": ["m-km"], "Raum & Form": ["Winkel messen"], "Daten & Zufall": ["Mittelwert/Spannweite"]}
  }
};

interface GeneratedTemplate {
  grade: number;
  quarter_app: string;
  domain: string;
  subcategory: string;
  difficulty: string;
  question_type: string;
  student_prompt: string;
  variables: Record<string, any>;
  solution: string;
  unit?: string;
  distractors: string[];
  explanation_teacher: string;
  tags: string[];
}

async function generateWithGemini(prompt: string): Promise<any> {
  if (!geminiApiKey) {
    throw new Error('GEMINI_API_KEY not configured');
  }

  const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${geminiApiKey}`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      contents: [{ parts: [{ text: prompt }] }],
      generationConfig: { temperature: 0.7, maxOutputTokens: 2048 }
    }),
  });

  if (!response.ok) {
    throw new Error(`Gemini API error: ${response.status}`);
  }

  const data = await response.json();
  const content = data.candidates?.[0]?.content?.parts?.[0]?.text;
  
  if (!content) {
    throw new Error('No content generated by Gemini');
  }

  return JSON.parse(content);
}

function buildCurriculumPrompt(grade: number, quarter: string, domain: string, topics: string[], count: number = 12): string {
  const difficulties = ['AFB I', 'AFB II', 'AFB III'];
  const questionTypes = ['multiple-choice', 'text-input', 'matching'];
  
  return `Erstelle ${count} verschiedene deutsche Mathematikaufgaben f√ºr Klasse ${grade}, Quartal ${quarter}, Dom√§ne "${domain}":

**Lehrplan-Themen:**
${topics.map(topic => `- ${topic}`).join('\n')}

**Anforderungen:**
- Schwierigkeitsverteilung: AFB I (50%), AFB II (35%), AFB III (15%)
- Itemtyp-Mix: Multiple Choice (45%), Text-Input (35%), Matching (20%)
- Deutsche Sprache, altersgerecht f√ºr Klasse ${grade}
- Realistische Kontexte: Alltag, Schule, Sport, Einkaufen
- Vielf√§ltige Zahlenwerte (auch "krumme" Zahlen)

**JSON-Ausgabe (Array):**
[{
  "grade": ${grade},
  "quarter_app": "${quarter}",
  "domain": "${domain}",
  "subcategory": string,
  "difficulty": "AFB I|AFB II|AFB III",
  "question_type": "multiple-choice|text-input|matching",
  "student_prompt": string (max ${grade <= 4 ? 200 : 300} Zeichen),
  "variables": {},
  "solution": string,
  "unit": string?,
  "distractors": string[] (f√ºr MC: 3 falsche Antworten),
  "explanation_teacher": string,
  "tags": string[]
}]

Erstelle ${count} unterschiedliche, hochwertige Aufgaben basierend auf den Lehrplan-Themen!`;
}

async function insertMathTemplates(templates: GeneratedTemplate[]): Promise<void> {
  const dbTemplates = templates.map(template => ({
    grade: template.grade,
    grade_app: template.grade,
    quarter_app: template.quarter_app,
    domain: template.domain,
    subcategory: template.subcategory,
    difficulty: template.difficulty,
    question_type: template.question_type,
    student_prompt: template.student_prompt,
    variables: template.variables || {},
    solution: JSON.stringify(template.solution),
    unit: template.unit,
    distractors: template.distractors || [],
    explanation_teacher: template.explanation_teacher,
    source_skill_id: `curriculum_${template.grade}_${template.quarter_app}_${template.domain.replace(/\s+/g, '_')}`,
    tags: template.tags || [],
    seed: Math.floor(Math.random() * 1000000),
    status: 'ACTIVE'
  }));

  const { error } = await supabase
    .from('templates')
    .insert(dbTemplates);

  if (error) {
    console.error('Error inserting templates:', error);
    throw error;
  }

  console.log(`‚úÖ Inserted ${dbTemplates.length} math templates`);
}

async function seedMathCurriculum(): Promise<any> {
  console.log('üè´ Starting systematic math curriculum seeding');
  
  const results = {
    total_generated: 0,
    total_inserted: 0,
    processed_combinations: 0,
    errors: [] as string[]
  };

  // Process each grade, quarter, and domain combination
  for (const [grade, quarters] of Object.entries(MATH_CURRICULUM)) {
    const gradeNum = parseInt(grade);
    
    for (const [quarter, domains] of Object.entries(quarters)) {
      for (const [domain, topics] of Object.entries(domains)) {
        try {
          console.log(`\nüìö Processing: Grade ${gradeNum}, ${quarter}, ${domain}`);
          
          // Check existing count
          const { data: existing } = await supabase
            .from('templates')
            .select('id')
            .eq('grade', gradeNum)
            .eq('quarter_app', quarter)
            .eq('domain', domain)
            .eq('status', 'ACTIVE');

          const existingCount = existing?.length || 0;
          
          if (existingCount >= 12) {
            console.log(`‚úÖ Skipping - already has ${existingCount} templates`);
            continue;
          }

          const neededCount = 12 - existingCount;
          
          // Generate templates based on curriculum
          const prompt = buildCurriculumPrompt(gradeNum, quarter, domain, topics, neededCount);
          const generated = await generateWithGemini(prompt);
          const templates = Array.isArray(generated) ? generated : [generated];
          
          if (templates.length > 0) {
            await insertMathTemplates(templates);
            results.total_inserted += templates.length;
          }
          
          results.total_generated += templates.length;
          results.processed_combinations++;
          
          // Delay to avoid overwhelming the API
          await new Promise(resolve => setTimeout(resolve, 2000));
          
        } catch (error) {
          console.error(`‚ùå Error processing ${grade}-${quarter}-${domain}:`, error);
          results.errors.push(`${grade}-${quarter}-${domain}: ${error.message}`);
        }
      }
    }
  }

  console.log(`\nüéâ Math curriculum seeding complete!`);
  console.log(`üìä Processed: ${results.processed_combinations} combinations`);
  console.log(`üìä Generated: ${results.total_generated}, Inserted: ${results.total_inserted}`);
  
  return results;
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('üöÄ Math curriculum seeder started');
    
    const result = await seedMathCurriculum();

    return new Response(JSON.stringify({
      success: true,
      message: 'Math curriculum seeding completed',
      data: result
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('‚ùå Error in math curriculum seeder:', error);
    return new Response(JSON.stringify({ 
      success: false,
      error: error.message 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});